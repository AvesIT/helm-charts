# Default values for mailu.

# Global common parameters (see Bitnamis common chart)
global:
  # -- Global container image registry
  imageRegistry: ""
  # -- Global container image pull secret
  imagePullSecrets: []
  # -- Global storageClass to use for persistent volumes
  storageClass: ""

# -- Force target Kubernetes version (using Helm capabilities if not set)
kubeVersion: ""
# -- String to partially override mailu.fullname include (will maintain the release name)
nameOverride: ""
# -- String to fully override mailu.fullname template
fullnameOverride: ""
# -- Add labels to all the deployed resources
commonLabels: {}
# --Add annotations to all the deployed resources
commonAnnotations: {}

# e.g.:
# hostnames:
#   - mail.example.com
#   - imap.example.com
# -- List of hostnames to generate certificates and ingresses for. The first will be used as primary mail hostname
hostnames: []

# e.g.:
# domain: example.com
# -- Mail domain name. See https://github.com/Mailu/Mailu/blob/master/docs/faq.rst#what-is-the-difference-between-domain-and-hostnames
domain: ""

# e.g.:
# secretKey: chang3m3!
# -- The secret key is required for protecting authentication cookies and must be set individually for each deployment
# If empty, a random secret key will be generated and saved in a secret
secretKey: ""

# e.g.:
# existingSecret: mailu-secret
# -- existingSecret Name of the existing secret to retrieve the secretKey.
# The secret has to contain the secretKey value under the `secret-key` key.
existingSecret: ""

# e.g.:
# initialAccount:
#   username: mailadmin
#   domain: mydomain.com
#   password: chang3m3!
#
# An existing secret can be used to retrieve the initial account's password. For that, set the secret name in 'initialAccount.existingSecret'.
# The secret needs to contain the password under the 'initial-account-password' key.
# If the a value is also set under 'initialAccount.password', that password will be taken.
# e.g.:
# initialAccount:
#   existingSecret: mailu-secret
# -- An initial account can automatically be created:
initialAccount: {}

clusterDomain: cluster.local

# nodeSelector: {}

# # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
# # -- Tolerations for pod assignment
# tolerations: []

# # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# # -- Affinity for pod assignment
# affinity: {}

database:
  # type of the database for mailu (sqlite/mysql/postgresql)
  # default database is an embedded sqlite
  # for mysql, see settings below
  type: sqlite

  # type of the database for roundcube (sqlite/mysql/postgresql)
  # default database is an embedded sqlite
  # for mysql, see settings below
  roundcube:
    type: sqlite
    database: roundcube
    username: roundcube
    password: changeme

  # For 'mysql' type (or mariadb) use the following config:
  # You can set the 'host' value to use an external database.
  # If the 'host' value is not set, a database instance is created by this chart.
  # e.g.:
  # mysql:
  #   host: external-db-hostname
  #   # root password for mysql database, only used for embedded mysql
  #   rootPassword: chang3m3!
  #
  #   # Settings for mailu database
  #   database: mailu
  #   user: mailu
  #   password: chang3m3!
  #
  #   # Settings for roundcube database
  #   roundcubeDatabase: roundcube
  #   roundcubeUser: roundcube
  #   roundcubePassword: chang3m3!
  #
  #   existingSecret: mail-mysql
  mysql: {}

  # For an external PostgreSQL database, use the following config:
  # e.g.:
  # postgresql:
  #   host: external-db-hostname
  #   # Settings for mailu database
  #   database: mailu
  #   user: mailu
  #   password: chang3m3!
  #
  #   # Settings for roundcube database
  #   roundcubeDatabase: roundcube
  #   roundcubeUser: roundcube
  #   roundcubePassword: chang3m3!
  #
  #   existingSecret: mail-postgresql

  postgresql: {}

##
## MariaDB chart configuration
## for more options see https://github.com/bitnami/charts/tree/master/bitnami/mariadb
##
mariadb:
  enabled: false

  architecture: standalone

  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided.
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: changeme
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: mailu
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: mailu
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: changeme

    ## @param auth.existingSecret Use existing secret for password details (`auth.rootPassword`, `auth.password`, `auth.replicationPassword`
    ## will be ignored and picked up from this secret). The secret has to contain the keys `mariadb-root-password`, `mariadb-replication-password`
    ## and `mariadb-password`
    ##
    existingSecret: ""

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  primary:
    persistence:
      enabled: false
      # storageClass: ""
      accessMode: ReadWriteOnce
      size: 8Gi

##
## PostgreSQL chart configuration
## for more options see https://github.com/bitnami/charts/tree/master/bitnami/postgresql
##
postgresql:
  enabled: false

  architecture: standalone

  auth:
    ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    ##
    enablePostgresUser: true
    ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
    ##
    postgresPassword: changeme
    ## @param auth.username Name for a custom user to create
    ##
    username: mailu
    ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    ##
    password: changeme
    ## @param auth.database Name for a custom database to create
    ##
    database: mailu

    existingSecret: ""
    ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
    ##
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password

  primary:
    persistence:
      enabled: false
      # storageClass: ""

external_relay: {}
#    host: "[domain.tld]:port"
#    username: username
#    password: SECRET
#    # username and password can also be stored as secret:
#    secretName: external-relay-secret
#    usernameKey: username
#    passwordKey: password

persistence:
  # -- Setings for a single volume for all apps.
  # Set single_pvc: false to use a per app volume and set the properties in <app>.persistence (ex. admin.persistence)
  single_pvc: true
  size: 100Gi
  accessMode: ReadWriteOnce
  #annotations:
  #  "helm.sh/resource-policy": keep
  #hostPath: /path/on/the/host
  #existingClaim: name-of-existing.claim
  #storageClass: "-"
  #claimNameOverride: my-claim-name

# -- Change this if you're using different address ranges for pods
subnet: 10.42.0.0/16

# -- Version/tag of mailu images - must be master or a version >= 1.9
mailuVersion: 1.9.26

# -- default log level. can be overridden globally or per service
logLevel: WARNING

# -- local part of the postmaster email address (Mailu will use @$DOMAIN as domain part)
postmaster: postmaster

mail:
  messageSizeLimitInMegabytes: 50

  # Configuration to prevent brute-force attacks. See the documentation for further information: https://mailu.io/master/configuration.html
  authRatelimit:
    # -- Sets the `AUTH_RATELIMIT_IP` environment variable in the `admin` pod
    ip: 60/hour
    # -- Sets the `AUTH_RATELIMIT_IP_V4_MASK` environment variable in the `admin` pod
    ipv4Mask: 24
    # -- Sets the `AUTH_RATELIMIT_IP_V6_MASK` environment variable in the `admin` pod
    ipv6Mask: 56
    # -- Sets the `AUTH_RATELIMIT_USER` environment variable in the `admin` pod
    user: 100/day
    # -- Sets the `AUTH_RATELIMIT_EXEMPTION_LENGTH` environment variable in the `admin` pod
    exemptionLength: 86400
    # -- Sets the `AUTH_RATELIMIT_EXEMPTION` environment variable in the `admin` pod
    exemption: ""

  # Configuration to reduce outgoing spam in case of a compromised account. See the documentation for further information: https://mailu.io/1.9/configuration.html?highlight=MESSAGE_RATELIMIT
  messageRatelimit:
    # -- Sets the `MESSAGE_RATELIMIT` environment variable in the `admin` pod
    value: 200/day
    # -- Sets the `MESSAGE_RATELIMIT_EXEMPTION` environment variable in the `admin` pod
    exemption: ""

# Certmanager settings
certmanager:
  # -- Enable certmanager (create certificates for all domains)
  enabled: true
  # -- Issuer to use for certificates
  issuerType: ClusterIssuer
  # -- Name of the issuer to use
  issuerName: letsencrypt
  # -- Name of the secret to use for certificates
  apiVersion: cert-manager.io/v1

# Set ingress and loadbalancer config
ingress:
  # -- Enable external ingress
  externalIngress: true
  # -- Set the ingress class name for external ingress
  ingressClassName: ""
  # -- Annotations to add to the external ingress
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  # -- Sets the value of `REAL_IP_HEADER` environment variable in the `front` pod
  realIpHeader: X-Forwarded-For
  # -- Sets the value of `REAL_IP_FROM` environment variable in the `front` pod
  realIpFrom: 0.0.0.0/0
  # -- Sets the value of `TLS_FLAVOR` environment variable in the `front` pod
  tlsFlavor: cert

# Frontend load balancer for non-HTTP(s) services
front:
  # logLevel: WARNING
  image:
    repository: mailu/nginx
    # -- Fron pod image tag
    # @default -- defaults to mailuVersion
    tag: ""
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 200Mi
      cpu: 200m
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

  controller:
    # -- Deployment or DaemonSet
    kind: Deployment
  nodeSelector: {}

  # -- Expose front mail ports via hostPort
  hostPort:
    enabled: true

  # Expose front mail ports via external service (ClusterIP or LoadBalancer)
  externalService:
    enabled: false
    type: ClusterIP
    # LoadBalancer
    # type: LoadBalancer
    # loadBalancerIP:
    externalTrafficPolicy: Local
    annotations: {}
    pop3: false
    pop3s: true
    imap: false
    imaps: true
    smtp: true
    smtps: true
    submission: true

  service:
    annotations: {}

admin:
  # -- Override default log level
  logLevel: ""

  # Pod image
  image:
    # -- Pod image repository
    repository: mailu/admin
    # -- Pod image tag
    # @default -- Defaults to mailuVersion
    tag: ""
    # -- Pod image pull policy
    pullPolicy: IfNotPresent

  # Pod persistence (if not using single_pvc)
  persistence:
    # -- Pod pvc size
    size: 20Gi
    # -- Pod pvc storage class
    storageClass: ""
    # -- Pod pvc access modes
    accessModes:
      - ReadWriteOnce
    # -- Pod pvc name override
    claimNameOverride: ""
    # -- Pod pvc annotations
    annotations: {}

  # Pod resources
  resources:
    # -- Pod requests
    requests:
      memory: 500Mi
      cpu: 500m
    # -- Pod resources limits
    # @default -- No limits by default
    limits: {}

  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  # Liveness probe values
  livenessProbe:
    # -- Enable livenessProbe
    enabled: true
    # -- Failure threshold for livenessProbe
    failureThreshold: 3
    # -- Initial delay seconds for livenessProbe
    initialDelaySeconds: 10
    # -- Period seconds for livenessProbe
    periodSeconds: 10
    # -- Success threshold for livenessProbe
    successThreshold: 1
    # -- Timeout seconds for livenessProbe
    timeoutSeconds: 1

  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  # Readiness probe values
  readinessProbe:
    # -- Enable readinessProbe
    enabled: true
    # -- Failure threshold for readinessProbe
    failureThreshold: 3
    # -- Initial delay seconds for readinessProbe
    initialDelaySeconds: 10
    # -- Period seconds for readinessProbe
    periodSeconds: 10
    # -- Success threshold for readinessProbe
    successThreshold: 1
    # -- Timeout seconds for readinessProbe
    timeoutSeconds: 1

  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  # Startup probe values
  startupProbe:
    # -- Enable startupProbe
    enabled: false
    # -- Failure threshold for startupProbe
    failureThreshold: 3
    # -- Initial delay seconds for startupProbe
    initialDelaySeconds: 10
    # -- Period seconds for startupProbe
    periodSeconds: 10
    # -- Success threshold for startupProbe
    successThreshold: 1
    # -- Timeout seconds for startupProbe
    timeoutSeconds: 1

  # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  # -- Add extra labels to pod
  podLabels: {}

  # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  # -- Add extra annotations to the pod
  podAnnotations: {}

  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  # -- Node labels selector for pod assignment
  nodeSelector: {}

  # ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  # e.g:
  # initContainers:
  #  - name: your-image-name
  #    image: your-image
  #    imagePullPolicy: Always
  #    command: ['sh', '-c', 'echo "hello world"']
  # -- Add additional init containers to the pod
  initContainers: []

  # -- Pods' priorityClassName
  priorityClassName: ""

  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  # -- In seconds, time given to the pod to terminate gracefully
  terminationGracePeriodSeconds: 2

  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # -- Affinity for admin pod assignment
  affinity: {}

  # ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  # -- Tolerations for pod assignment
  tolerations: []

  # ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#revision-history-limit
  # -- Configure the revisionHistoryLimit of the deployment
  revisionHistoryLimit: 3

  # ref: https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  # -- Pod pod host aliases
  hostAliases: []

  # ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  # -- Name of the k8s scheduler (other than default)
  schedulerName: ""

  # Service parameters
  service:
    # -- Admin service annotations
    annotations: {}

  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  # -- Topology Spread Constraints for pod assignment
  topologySpreadConstraints: []

  # Strategy to use to update Pods
  updateStrategy:
    # -- Can be set to RollingUpdate or OnDelete
    type: RollingUpdate

  # For example:
  # extraEnvVars:
  #  - name: MY_ENV_VAR
  #    value: env_var_value
  # -- Extra environment variable to pass to the running container
  extraEnvVars: []

  # -- Name of existing ConfigMap containing extra environment variables to mount in the pod
  extraEnvVarsCM: ""

  # -- Name of existing Secret containing extra environment variables to mount in the pod
  extraEnvVarsSecret: ""

  # -- Optionally specify extra list of additional volumeMounts for the pod
  extraVolumeMounts: []

redis:
  image:
    repository: redis
    tag: 5-alpine
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 300Mi
      cpu: 200m
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

postfix:
  # logLevel: WARNING
  image:
    repository: mailu/postfix
    # tag defaults to mailuVersion
    # tag: master
  containerSecurityContext: {}
  #    CRI-O users will need to add the following:
  #    capabilities:
  #      add:
  #        - SYS_CHROOT
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 2Gi
      cpu: 500m
    limits:
      memory: 2Gi
      cpu: 500m
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

dovecot:
  enabled: true
  # logLevel: WARNING
  image:
    repository: mailu/dovecot
    # tag defaults to mailuVersion
    # tag: master
  containerSecurityContext: {}
  #    CRI-O users will need to add the following:
  #    capabilities:
  #      add:
  #        - SYS_CHROOT
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 500Mi
      cpu: 500m
    limits:
      memory: 500Mi
      cpu: 500m
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5
  # enable dovecot overrides
  # overrides:
  #   dovecot.conf: |
  #     # More info here: https://mailu.io/1.8/kubernetes/mailu/index.html#dovecot
  #     mail_nfs_index = yes
  #     mail_nfs_storage = yes
  #     mail_fsync = always
  #     mmap_disable = yes
  #     mail_max_userip_connections=100

# historically rspamd and clamav shared their volumes in this chart
# this isn't needed anymore. to maintain backward compatibility and give users
# some time to migrate we keep this here.
#
# if you want a "shared" volume keep in mind you have to use affinity rules on
# rspamd and clamav pods so that both pods are scheduled on the same node
# to keep RWO volumes working
#
# otherwise set rspamd_clamav_persistence.single_pvc to true and review
# rspamd.persistence and clamav.persistence
rspamd_clamav_persistence:
  size: 20Gi
  storageClass: ""
  accessMode: ReadWriteOnce
  claimNameOverride: ""
  single_pvc: false
  #annotations:
  #  "helm.sh/resource-policy": keep

rspamd:
  # logLevel: WARNING
  image:
    repository: mailu/rspamd
    # tag defaults to mailuVersion
    # tag: master
  persistence:
    size: 1Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 200Mi
      cpu: 200m
  startupProbe: # give it 15 minutes for initial rule compilation
    periodSeconds: 10
    failureThreshold: 90
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

clamav:
  enabled: true
  # logLevel: WARNING
  image:
    repository: mailu/clamav
    # tag defaults to mailuVersion
    # tag: master
  persistence:
    size: 2Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 1Gi
      cpu: 1000m
    limits:
      memory: 2Gi
      cpu: 1000m
  service:
    annotations: {}
  startupProbe: # give it 10 minutes for initial freshclam update
    periodSeconds: 10
    failureThreshold: 60
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5
  # clamav must share a volume with rspamd. This is usually enforced by the volume itself (RWO). If you use RWM volumes and want to
  # have clamav running on the same node, add the following affinity rule:
#  affinity:
#    podAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        - labelSelector:
#            matchExpressions:
#              - key: component
#                operator: In
#                values:
#                  - rspamd
#          topologyKey: kubernetes.io/hostname

roundcube:
  # -- Enable deployment of Roundcube webmail
  enabled: true
  # -- Set the log level for Roundcube
  logLevel: ""
  image:
    repository: mailu/roundcube
    # tag defaults to mailuVersion
    # tag: master
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  uri: /roundcube
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 200Mi
      cpu: 200m
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

webdav:
  # -- Enable deployment of WebDAV server (using Radicale)
  enabled: false
  # logLevel: WARNING
  image:
    repository: mailu/radicale
    # tag defaults to mailuVersion
    # tag: master
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

mysql:
  image:
    repository: library/mariadb
    tag: 10.4.10
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 200m
  startupProbe:
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    periodSeconds: 10
    failureThreshold: 1
    timeoutSeconds: 5

fetchmail:
  # -- Enable deployment of fetchmail
  enabled: false
  # logLevel: WARNING
  image:
    repository: mailu/fetchmail
    # tag defaults to mailuVersion
    # tag: master
  persistence:
    size: 20Gi
    storageClass: ""
    accessMode: ReadWriteOnce
    claimNameOverride: ""
    #annotations:
    #  "helm.sh/resource-policy": keep
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 200Mi
      cpu: 200m
  delay: 600
